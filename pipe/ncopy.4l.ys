#/* $begin ncopy-ys */
##################################################################
# ncopy.ys - Copy a src block of len words to dst.
# Return the number of positive words (>0) contained in src.
#
# Include your name and ID here.
# Gao Zhiyuan
# 2017-81842
#
# Describe how and why you modified the baseline code.
#
##################################################################
# Do not modify this portion
# Function prologue.
# %rdi = src, %rsi = dst, %rdx = len
ncopy:

##################################################################
# You can modify this portion
	# Loop header
	#xorq %rax, %rax		# count = 0;
	iaddq $-4, %rdx		# len <= 5
	jle Rolling		# if so, goto Rolling:
Loop:
	mrmovq (%rdi), %r10	# read val from src...
	mrmovq 8(%rdi), %r11	# read val from src...
	mrmovq 16(%rdi), %r12	# read val from src...
	mrmovq 24(%rdi), %r13	# read val from src...


	andq %r10, %r10		# val <= 0?
	rmmovq %r12, 16(%rsi)	# ...and store it to dst
	rmmovq %r13, 24(%rsi)	# ...and store it to dst
	rmmovq %r10, (%rsi)	# ...and store it to dst
	rmmovq %r11, 8(%rsi)	# ...and store it to dst

	jle Npos1		# if so, goto Npos:
	iaddq $1, %rax		# count++
Npos1:
	
	andq %r11, %r11		# val <= 0?
	jle Npos2		# if so, goto Npos:
	iaddq $1, %rax		# count++
Npos2:

	andq %r12, %r12		# val <= 0?
	jle Npos3		# if so, goto Npos:
	iaddq $1, %rax		# count++
Npos3:
	andq %r13, %r13		# val <= 0?
	jle Npos4		# if so, goto Npos:
	iaddq $1, %rax		# count++
Npos4:
	iaddq $32, %rdi
	iaddq $32, %rsi
	iaddq $-4, %rdx		# len >= 3?	
	jg Loop		# if so, len -= 3; goto Loop:

Rolling:
	je ADD4
	iaddq $3, %rdx
	je ADD1
	iaddq $1, %rdx
	jle Done

RLoop:
	mrmovq (%rdi), %r10	
	rmmovq %r10, (%rsi)
	andq %r10, %r10
	jle Npos
	iaddq $1, %rax		# counter++
Npos:
	iaddq $-1, %rdx		# len--
	iaddq $8, %rdi	
	iaddq $8, %rsi
	andq %rdx, %rdx
	jg RLoop
	ret

ADD4:
	mrmovq (%rdi), %r10	# read val from src...
	mrmovq 8(%rdi), %r11	# read val from src...
	mrmovq 16(%rdi), %r12	# read val from src...
	mrmovq 24(%rdi), %r13	# read val from src...

	andq %r10, %r10		# val <= 0?
	rmmovq %r12, 16(%rsi)	# ...and store it to dst
	rmmovq %r13, 24(%rsi)	# ...and store it to dst
	rmmovq %r10, (%rsi)	# ...and store it to dst
	rmmovq %r11, 8(%rsi)	# ...and store it to dst

	jle Npos1		# if so, goto Npos:
	iaddq $1, %rax		# count++
Npos1:
	
	andq %r11, %r11		# val <= 0?
	jle Npos2		# if so, goto Npos:
	iaddq $1, %rax		# count++
Npos2:

	andq %r12, %r12		# val <= 0?
	jle Npos3		# if so, goto Npos:
	iaddq $1, %rax		# count++
Npos3:
	andq %r13, %r13		# val <= 0?
	jle Done		# if so, goto Npos:
	iaddq $1, %rax		# count++
	ret	

ADD1:
	mrmovq (%rdi), %r10	# read val from src...
	andq %r10, %r10		# val <= 0?
	rmmovq %r10, (%rsi)	# ...and store it to dst
	jle Done		# if so, goto Npos:
	iaddq $1, %rax		# count++
	

##################################################################
# Do not modify the following section of code
# Function epilogue.
Done:
	ret
##################################################################
# Keep the following label at the end of your function
End:
#/* $end ncopy-ys */
