                            | #######################################################################
                            | # Test for copying block of size 63;
                            | #######################################################################
0x000:                      | 	.pos 0
0x000: 30f49807000000000000 | main:	irmovq Stack, %rsp  	# Set up stack pointer
                            | 
                            | 	# Set up arguments for copy function and then invoke it
0x00a: 30f23f00000000000000 | 	irmovq $63, %rdx		# src and dst have 63 elements
0x014: 30f61805000000000000 | 	irmovq dest, %rsi	# dst array
0x01e: 30f70803000000000000 | 	irmovq src, %rdi	# src array
0x028: 803200000000000000   | 	call ncopy		 
0x031: 00                   | 	halt			# should halt with num nonzeros in %rax
0x032:                      | StartFun:
                            | #/* $begin ncopy-ys */
                            | ##################################################################
                            | # ncopy.ys - Copy a src block of len words to dst.
                            | # Return the number of positive words (>0) contained in src.
                            | #
                            | # Include your name and ID here.
                            | # Gao Zhiyuan
                            | # 2017-81842
                            | #
                            | # Describe how and why you modified the baseline code.
                            | #
                            | ##################################################################
                            | # Do not modify this portion
                            | # Function prologue.
                            | # %rdi = src, %rsi = dst, %rdx = len
0x032:                      | ncopy:
                            | 
                            | ##################################################################
                            | # You can modify this portion
                            | 	# Loop header
                            | 	#xorq %rax, %rax		# count = 0;
0x032: c0f2fcffffffffffffff | 	iaddq $-4, %rdx		# len <= 5
0x03c: 711001000000000000   | 	jle Rolling		# if so, goto Rolling:
0x045:                      | Loop:
0x045: 50a70000000000000000 | 	mrmovq (%rdi), %r10	# read val from src...
0x04f: 50b70800000000000000 | 	mrmovq 8(%rdi), %r11	# read val from src...
0x059: 50c71000000000000000 | 	mrmovq 16(%rdi), %r12	# read val from src...
0x063: 50d71800000000000000 | 	mrmovq 24(%rdi), %r13	# read val from src...
                            | 
                            | 
0x06d: 62aa                 | 	andq %r10, %r10		# val <= 0?
0x06f: 40c61000000000000000 | 	rmmovq %r12, 16(%rsi)	# ...and store it to dst
0x079: 40d61800000000000000 | 	rmmovq %r13, 24(%rsi)	# ...and store it to dst
0x083: 40a60000000000000000 | 	rmmovq %r10, (%rsi)	# ...and store it to dst
0x08d: 40b60800000000000000 | 	rmmovq %r11, 8(%rsi)	# ...and store it to dst
                            | 
0x097: 71aa00000000000000   | 	jle Npos1		# if so, goto Npos:
0x0a0: c0f00100000000000000 | 	iaddq $1, %rax		# count++
0x0aa:                      | Npos1:
                            | 	
0x0aa: 62bb                 | 	andq %r11, %r11		# val <= 0?
0x0ac: 71bf00000000000000   | 	jle Npos2		# if so, goto Npos:
0x0b5: c0f00100000000000000 | 	iaddq $1, %rax		# count++
0x0bf:                      | Npos2:
                            | 
0x0bf: 62cc                 | 	andq %r12, %r12		# val <= 0?
0x0c1: 71d400000000000000   | 	jle Npos3		# if so, goto Npos:
0x0ca: c0f00100000000000000 | 	iaddq $1, %rax		# count++
0x0d4:                      | Npos3:
0x0d4: 62dd                 | 	andq %r13, %r13		# val <= 0?
0x0d6: 71e900000000000000   | 	jle Npos4		# if so, goto Npos:
0x0df: c0f00100000000000000 | 	iaddq $1, %rax		# count++
0x0e9:                      | Npos4:
0x0e9: c0f72000000000000000 | 	iaddq $32, %rdi
0x0f3: c0f62000000000000000 | 	iaddq $32, %rsi
                            | 
0x0fd: c0f2fcffffffffffffff | 	iaddq $-4, %rdx		# len >= 3?	
0x107: 764500000000000000   | 	jg Loop		# if so, len -= 3; goto Loop:
                            | 
0x110:                      | Rolling:
0x110: 735e02000000000000   | 	je ADD4
0x119: c0f20100000000000000 | 	iaddq $1, %rdx
0x123: 73e201000000000000   | 	je ADD3
0x12c: c0f20100000000000000 | 	iaddq $1, %rdx
0x136: 736501000000000000   | 	je ADD2
0x13f: c0f20100000000000000 | 	iaddq $1, %rdx
0x149: 73b801000000000000   | 	je ADD1
0x152: c0f20100000000000000 | 	iaddq $1, %rdx
0x15c: 710203000000000000   | 	jle Done
0x165:                      | ADD2:
0x165: 50a70000000000000000 | 	mrmovq (%rdi), %r10	# read val from src...
0x16f: 50b70800000000000000 | 	mrmovq 8(%rdi), %r11	# read val from src...
                            | 
0x179: 62aa                 | 	andq %r10, %r10		# val <= 0?
0x17b: 40a60000000000000000 | 	rmmovq %r10, (%rsi)	# ...and store it to dst
0x185: 40b60800000000000000 | 	rmmovq %r11, 8(%rsi)	# ...and store it to dst
                            | 
0x18f: 71a201000000000000   | 	jle ADD2N		# if so, goto Npos:
0x198: c0f00100000000000000 | 	iaddq $1, %rax		# count++
0x1a2:                      | ADD2N:
0x1a2: 62bb                 | 	andq %r11, %r11
0x1a4: 710203000000000000   | 	jle Done
0x1ad: c0f00100000000000000 | 	iaddq $1, %rax
0x1b7: 90                   | 	ret
0x1b8:                      | ADD1:
0x1b8: 50a70000000000000000 | 	mrmovq (%rdi), %r10	# read val from src...
0x1c2: 62aa                 | 	andq %r10, %r10		# val <= 0?
0x1c4: 40a60000000000000000 | 	rmmovq %r10, (%rsi)	# ...and store it to dst
0x1ce: 710203000000000000   | 	jle Done		# if so, goto Npos:
0x1d7: c0f00100000000000000 | 	iaddq $1, %rax		# count++
0x1e1: 90                   | 	ret
0x1e2:                      | ADD3:
0x1e2: 50a70000000000000000 | 	mrmovq (%rdi), %r10	# read val from src...
0x1ec: 50b70800000000000000 | 	mrmovq 8(%rdi), %r11	# read val from src...
0x1f6: 50c71000000000000000 | 	mrmovq 16(%rdi), %r12	# read val from src...
                            | 
0x200: 62aa                 | 	andq %r10, %r10		# val <= 0?
0x202: 40c61000000000000000 | 	rmmovq %r12, 16(%rsi)	# ...and store it to dst
0x20c: 40a60000000000000000 | 	rmmovq %r10, (%rsi)	# ...and store it to dst
0x216: 40b60800000000000000 | 	rmmovq %r11, 8(%rsi)	# ...and store it to dst
                            | 
0x220: 713302000000000000   | 	jle Nposadd31		# if so, goto Npos:
0x229: c0f00100000000000000 | 	iaddq $1, %rax		# count++
0x233:                      | Nposadd31:
                            | 	
0x233: 62bb                 | 	andq %r11, %r11		# val <= 0?
0x235: 714802000000000000   | 	jle Nposadd32		# if so, goto Npos:
0x23e: c0f00100000000000000 | 	iaddq $1, %rax		# count++
0x248:                      | Nposadd32:
                            | 
0x248: 62cc                 | 	andq %r12, %r12		# val <= 0?
0x24a: 710203000000000000   | 	jle Done		# if so, goto Npos:
0x253: c0f00100000000000000 | 	iaddq $1, %rax		# count++
0x25d: 90                   | 	ret
0x25e:                      | ADD4:
0x25e: 50a70000000000000000 | 	mrmovq (%rdi), %r10	# read val from src...
0x268: 50b70800000000000000 | 	mrmovq 8(%rdi), %r11	# read val from src...
0x272: 50c71000000000000000 | 	mrmovq 16(%rdi), %r12	# read val from src...
0x27c: 50d71800000000000000 | 	mrmovq 24(%rdi), %r13	# read val from src...
                            | 
0x286: 62aa                 | 	andq %r10, %r10		# val <= 0?
0x288: 40c61000000000000000 | 	rmmovq %r12, 16(%rsi)	# ...and store it to dst
0x292: 40d61800000000000000 | 	rmmovq %r13, 24(%rsi)	# ...and store it to dst
0x29c: 40a60000000000000000 | 	rmmovq %r10, (%rsi)	# ...and store it to dst
0x2a6: 40b60800000000000000 | 	rmmovq %r11, 8(%rsi)	# ...and store it to dst
                            | 
0x2b0: 71c302000000000000   | 	jle Nposadd41		# if so, goto Npos:
0x2b9: c0f00100000000000000 | 	iaddq $1, %rax		# count++
0x2c3:                      | Nposadd41:
                            | 	
0x2c3: 62bb                 | 	andq %r11, %r11		# val <= 0?
0x2c5: 71d802000000000000   | 	jle Nposadd42		# if so, goto Npos:
0x2ce: c0f00100000000000000 | 	iaddq $1, %rax		# count++
0x2d8:                      | Nposadd42:
                            | 
0x2d8: 62cc                 | 	andq %r12, %r12		# val <= 0?
0x2da: 71ed02000000000000   | 	jle Nposadd43		# if so, goto Npos:
0x2e3: c0f00100000000000000 | 	iaddq $1, %rax		# count++
0x2ed:                      | Nposadd43:
0x2ed: 62dd                 | 	andq %r13, %r13		# val <= 0?
0x2ef: 710203000000000000   | 	jle Done		# if so, goto Npos:
0x2f8: c0f00100000000000000 | 	iaddq $1, %rax		# count++
                            | 
                            | 
                            | ##################################################################
                            | # Do not modify the following section of code
                            | # Function epilogue.
0x302:                      | Done:
0x302: 90                   | 	ret
                            | ##################################################################
                            | # Keep the following label at the end of your function
0x303:                      | End:
                            | #/* $end ncopy-ys */
0x303:                      | EndFun:
                            | 
                            | ###############################
                            | # Source and destination blocks 
                            | ###############################
0x308:                      | 	.align 8
0x308:                      | src:
0x308: 0100000000000000     | 	.quad 1
0x310: 0200000000000000     | 	.quad 2
0x318: fdffffffffffffff     | 	.quad -3
0x320: 0400000000000000     | 	.quad 4
0x328: fbffffffffffffff     | 	.quad -5
0x330: 0600000000000000     | 	.quad 6
0x338: f9ffffffffffffff     | 	.quad -7
0x340: 0800000000000000     | 	.quad 8
0x348: f7ffffffffffffff     | 	.quad -9
0x350: f6ffffffffffffff     | 	.quad -10
0x358: f5ffffffffffffff     | 	.quad -11
0x360: 0c00000000000000     | 	.quad 12
0x368: 0d00000000000000     | 	.quad 13
0x370: f2ffffffffffffff     | 	.quad -14
0x378: 0f00000000000000     | 	.quad 15
0x380: f0ffffffffffffff     | 	.quad -16
0x388: 1100000000000000     | 	.quad 17
0x390: 1200000000000000     | 	.quad 18
0x398: 1300000000000000     | 	.quad 19
0x3a0: 1400000000000000     | 	.quad 20
0x3a8: ebffffffffffffff     | 	.quad -21
0x3b0: 1600000000000000     | 	.quad 22
0x3b8: e9ffffffffffffff     | 	.quad -23
0x3c0: 1800000000000000     | 	.quad 24
0x3c8: e7ffffffffffffff     | 	.quad -25
0x3d0: 1a00000000000000     | 	.quad 26
0x3d8: 1b00000000000000     | 	.quad 27
0x3e0: 1c00000000000000     | 	.quad 28
0x3e8: e3ffffffffffffff     | 	.quad -29
0x3f0: e2ffffffffffffff     | 	.quad -30
0x3f8: e1ffffffffffffff     | 	.quad -31
0x400: 2000000000000000     | 	.quad 32
0x408: 2100000000000000     | 	.quad 33
0x410: deffffffffffffff     | 	.quad -34
0x418: ddffffffffffffff     | 	.quad -35
0x420: dcffffffffffffff     | 	.quad -36
0x428: dbffffffffffffff     | 	.quad -37
0x430: daffffffffffffff     | 	.quad -38
0x438: d9ffffffffffffff     | 	.quad -39
0x440: 2800000000000000     | 	.quad 40
0x448: d7ffffffffffffff     | 	.quad -41
0x450: d6ffffffffffffff     | 	.quad -42
0x458: d5ffffffffffffff     | 	.quad -43
0x460: 2c00000000000000     | 	.quad 44
0x468: 2d00000000000000     | 	.quad 45
0x470: d2ffffffffffffff     | 	.quad -46
0x478: d1ffffffffffffff     | 	.quad -47
0x480: d0ffffffffffffff     | 	.quad -48
0x488: 3100000000000000     | 	.quad 49
0x490: ceffffffffffffff     | 	.quad -50
0x498: cdffffffffffffff     | 	.quad -51
0x4a0: 3400000000000000     | 	.quad 52
0x4a8: cbffffffffffffff     | 	.quad -53
0x4b0: caffffffffffffff     | 	.quad -54
0x4b8: 3700000000000000     | 	.quad 55
0x4c0: c8ffffffffffffff     | 	.quad -56
0x4c8: c7ffffffffffffff     | 	.quad -57
0x4d0: 3a00000000000000     | 	.quad 58
0x4d8: 3b00000000000000     | 	.quad 59
0x4e0: 3c00000000000000     | 	.quad 60
0x4e8: 3d00000000000000     | 	.quad 61
0x4f0: 3e00000000000000     | 	.quad 62
0x4f8: 3f00000000000000     | 	.quad 63
0x500: fadebc0000000000     | 	.quad 0xbcdefa # This shouldn't get moved
                            | 
0x510:                      | 	.align 16
0x510:                      | Predest:
0x510: fadebc0000000000     | 	.quad 0xbcdefa
0x518:                      | dest:
0x518: abefcd0000000000     | 	.quad 0xcdefab
0x520: abefcd0000000000     | 	.quad 0xcdefab
0x528: abefcd0000000000     | 	.quad 0xcdefab
0x530: abefcd0000000000     | 	.quad 0xcdefab
0x538: abefcd0000000000     | 	.quad 0xcdefab
0x540: abefcd0000000000     | 	.quad 0xcdefab
0x548: abefcd0000000000     | 	.quad 0xcdefab
0x550: abefcd0000000000     | 	.quad 0xcdefab
0x558: abefcd0000000000     | 	.quad 0xcdefab
0x560: abefcd0000000000     | 	.quad 0xcdefab
0x568: abefcd0000000000     | 	.quad 0xcdefab
0x570: abefcd0000000000     | 	.quad 0xcdefab
0x578: abefcd0000000000     | 	.quad 0xcdefab
0x580: abefcd0000000000     | 	.quad 0xcdefab
0x588: abefcd0000000000     | 	.quad 0xcdefab
0x590: abefcd0000000000     | 	.quad 0xcdefab
0x598: abefcd0000000000     | 	.quad 0xcdefab
0x5a0: abefcd0000000000     | 	.quad 0xcdefab
0x5a8: abefcd0000000000     | 	.quad 0xcdefab
0x5b0: abefcd0000000000     | 	.quad 0xcdefab
0x5b8: abefcd0000000000     | 	.quad 0xcdefab
0x5c0: abefcd0000000000     | 	.quad 0xcdefab
0x5c8: abefcd0000000000     | 	.quad 0xcdefab
0x5d0: abefcd0000000000     | 	.quad 0xcdefab
0x5d8: abefcd0000000000     | 	.quad 0xcdefab
0x5e0: abefcd0000000000     | 	.quad 0xcdefab
0x5e8: abefcd0000000000     | 	.quad 0xcdefab
0x5f0: abefcd0000000000     | 	.quad 0xcdefab
0x5f8: abefcd0000000000     | 	.quad 0xcdefab
0x600: abefcd0000000000     | 	.quad 0xcdefab
0x608: abefcd0000000000     | 	.quad 0xcdefab
0x610: abefcd0000000000     | 	.quad 0xcdefab
0x618: abefcd0000000000     | 	.quad 0xcdefab
0x620: abefcd0000000000     | 	.quad 0xcdefab
0x628: abefcd0000000000     | 	.quad 0xcdefab
0x630: abefcd0000000000     | 	.quad 0xcdefab
0x638: abefcd0000000000     | 	.quad 0xcdefab
0x640: abefcd0000000000     | 	.quad 0xcdefab
0x648: abefcd0000000000     | 	.quad 0xcdefab
0x650: abefcd0000000000     | 	.quad 0xcdefab
0x658: abefcd0000000000     | 	.quad 0xcdefab
0x660: abefcd0000000000     | 	.quad 0xcdefab
0x668: abefcd0000000000     | 	.quad 0xcdefab
0x670: abefcd0000000000     | 	.quad 0xcdefab
0x678: abefcd0000000000     | 	.quad 0xcdefab
0x680: abefcd0000000000     | 	.quad 0xcdefab
0x688: abefcd0000000000     | 	.quad 0xcdefab
0x690: abefcd0000000000     | 	.quad 0xcdefab
0x698: abefcd0000000000     | 	.quad 0xcdefab
0x6a0: abefcd0000000000     | 	.quad 0xcdefab
0x6a8: abefcd0000000000     | 	.quad 0xcdefab
0x6b0: abefcd0000000000     | 	.quad 0xcdefab
0x6b8: abefcd0000000000     | 	.quad 0xcdefab
0x6c0: abefcd0000000000     | 	.quad 0xcdefab
0x6c8: abefcd0000000000     | 	.quad 0xcdefab
0x6d0: abefcd0000000000     | 	.quad 0xcdefab
0x6d8: abefcd0000000000     | 	.quad 0xcdefab
0x6e0: abefcd0000000000     | 	.quad 0xcdefab
0x6e8: abefcd0000000000     | 	.quad 0xcdefab
0x6f0: abefcd0000000000     | 	.quad 0xcdefab
0x6f8: abefcd0000000000     | 	.quad 0xcdefab
0x700: abefcd0000000000     | 	.quad 0xcdefab
0x708: abefcd0000000000     | 	.quad 0xcdefab
0x710:                      | Postdest:
0x710: bcfade0000000000     | 	.quad 0xdefabc
                            | 
0x718:                      | .align 8
                            | # Run time stack
0x718: 0000000000000000     | 	.quad 0
0x720: 0000000000000000     | 	.quad 0
0x728: 0000000000000000     | 	.quad 0
0x730: 0000000000000000     | 	.quad 0
0x738: 0000000000000000     | 	.quad 0
0x740: 0000000000000000     | 	.quad 0
0x748: 0000000000000000     | 	.quad 0
0x750: 0000000000000000     | 	.quad 0
0x758: 0000000000000000     | 	.quad 0
0x760: 0000000000000000     | 	.quad 0
0x768: 0000000000000000     | 	.quad 0
0x770: 0000000000000000     | 	.quad 0
0x778: 0000000000000000     | 	.quad 0
0x780: 0000000000000000     | 	.quad 0
0x788: 0000000000000000     | 	.quad 0
0x790: 0000000000000000     | 	.quad 0
                            | 
0x798:                      | Stack:
