                            | #######################################################################
                            | # Test for copying block of size 63;
                            | #######################################################################
0x000:                      | 	.pos 0
0x000: 30f48806000000000000 | main:	irmovq Stack, %rsp  	# Set up stack pointer
                            | 
                            | 	# Set up arguments for copy function and then invoke it
0x00a: 30f23f00000000000000 | 	irmovq $63, %rdx		# src and dst have 63 elements
0x014: 30f60804000000000000 | 	irmovq dest, %rsi	# dst array
0x01e: 30f7f801000000000000 | 	irmovq src, %rdi	# src array
0x028: 803200000000000000   | 	call ncopy		 
0x031: 00                   | 	halt			# should halt with num nonzeros in %rax
0x032:                      | StartFun:
                            | #/* $begin ncopy-ys */
                            | ##################################################################
                            | # ncopy.ys - Copy a src block of len words to dst.
                            | # Return the number of positive words (>0) contained in src.
                            | #
                            | # Include your name and ID here.
                            | # Gao Zhiyuan
                            | # 2017-81842
                            | #
                            | # Describe how and why you modified the baseline code.
                            | #
                            | ##################################################################
                            | # Do not modify this portion
                            | # Function prologue.
                            | # %rdi = src, %rsi = dst, %rdx = len
0x032:                      | ncopy:
                            | 
                            | ##################################################################
                            | # You can modify this portion
                            | 	# Loop header
0x032: 6300                 | 	xorq %rax, %rax		# count = 0;
0x034: c0f2fbffffffffffffff | 	iaddq $-5, %rdx		# len <= 5
0x03e: 718b01000000000000   | 	jle Rolling		# if so, goto Rolling:
0x047:                      | Loop:
0x047: 50a70000000000000000 | 	mrmovq (%rdi), %r10	# read val from src...
0x051: c0f70800000000000000 | 	iaddq $8, %rdi
0x05b: 40a60000000000000000 | 	rmmovq %r10, (%rsi)	# ...and store it to dst
0x065: c0f60800000000000000 | 	iaddq $8, %rsi
0x06f: 62aa                 | 	andq %r10, %r10		# val <= 0?
0x071: 718400000000000000   | 	jle Npos1		# if so, goto Npos:
0x07a: c0f00100000000000000 | 	iaddq $1, %rax		# count++
0x084:                      | Npos1:
                            | 
                            | 	
0x084: 50b70000000000000000 | 	mrmovq (%rdi), %r11	# read val from src...
0x08e: c0f70800000000000000 | 	iaddq $8, %rdi
0x098: 40b60000000000000000 | 	rmmovq %r11, (%rsi)	# ...and store it to dst
0x0a2: c0f60800000000000000 | 	iaddq $8, %rsi
0x0ac: 62bb                 | 	andq %r11, %r11		# val <= 0?
0x0ae: 71c100000000000000   | 	jle Npos2		# if so, goto Npos:
0x0b7: c0f00100000000000000 | 	iaddq $1, %rax		# count++
0x0c1:                      | Npos2:
                            | 
0x0c1: 50c70000000000000000 | 	mrmovq (%rdi), %r12	# read val from src...
0x0cb: c0f70800000000000000 | 	iaddq $8, %rdi
0x0d5: 40c60000000000000000 | 	rmmovq %r12, (%rsi)	# ...and store it to dst
0x0df: c0f60800000000000000 | 	iaddq $8, %rsi
0x0e9: 62cc                 | 	andq %r12, %r12		# val <= 0?
0x0eb: 71fe00000000000000   | 	jle Npos3		# if so, goto Npos:
0x0f4: c0f00100000000000000 | 	iaddq $1, %rax		# count++
0x0fe:                      | Npos3:
                            | 
0x0fe: 50d70000000000000000 | 	mrmovq (%rdi), %r13	# read val from src...
0x108: c0f70800000000000000 | 	iaddq $8, %rdi
0x112: 40d60000000000000000 | 	rmmovq %r13, (%rsi)	# ...and store it to dst
0x11c: c0f60800000000000000 | 	iaddq $8, %rsi
0x126: 62dd                 | 	andq %r13, %r13		# val <= 0?
0x128: 713b01000000000000   | 	jle Npos4		# if so, goto Npos:
0x131: c0f00100000000000000 | 	iaddq $1, %rax		# count++
0x13b:                      | Npos4:
0x13b: 50e70000000000000000 | 	mrmovq (%rdi), %r14	# read val from src...
0x145: c0f70800000000000000 | 	iaddq $8, %rdi
0x14f: 40e60000000000000000 | 	rmmovq %r14, (%rsi)	# ...and store it to dst
0x159: c0f60800000000000000 | 	iaddq $8, %rsi
0x163: 62ee                 | 	andq %r14, %r14		# val <= 0?
0x165: 717801000000000000   | 	jle Npos5		# if so, goto Npos:
0x16e: c0f00100000000000000 | 	iaddq $1, %rax		# count++
0x178:                      | Npos5:
0x178: c0f2fbffffffffffffff | 	iaddq $-5, %rdx		# len >= 3?	
0x182: 764700000000000000   | 	jg Loop		# if so, len -= 3; goto Loop:
                            | 
0x18b:                      | Rolling:
0x18b: c0f20500000000000000 | 	iaddq $5, %rdx
0x195: 6222                 | 	andq %rdx, %rdx		# if len <= 0
0x197: 71f201000000000000   | 	jle Done
                            | 
0x1a0:                      | RLoop:
0x1a0: 50a70000000000000000 | 	mrmovq (%rdi), %r10	
0x1aa: 40a60000000000000000 | 	rmmovq %r10, (%rsi)
0x1b4: 62aa                 | 	andq %r10, %r10
0x1b6: 71c901000000000000   | 	jle Npos
0x1bf: c0f00100000000000000 | 	iaddq $1, %rax		# counter++
0x1c9:                      | Npos:
0x1c9: c0f2ffffffffffffffff | 	iaddq $-1, %rdx		# len--
0x1d3: c0f70800000000000000 | 	iaddq $8, %rdi	
0x1dd: c0f60800000000000000 | 	iaddq $8, %rsi
0x1e7: 6222                 | 	andq %rdx, %rdx
0x1e9: 76a001000000000000   | 	jg RLoop
                            | ##################################################################
                            | # Do not modify the following section of code
                            | # Function epilogue.
0x1f2:                      | Done:
0x1f2: 90                   | 	ret
                            | ##################################################################
                            | # Keep the following label at the end of your function
0x1f3:                      | End:
                            | #/* $end ncopy-ys */
0x1f3:                      | EndFun:
                            | 
                            | ###############################
                            | # Source and destination blocks 
                            | ###############################
0x1f8:                      | 	.align 8
0x1f8:                      | src:
0x1f8: ffffffffffffffff     | 	.quad -1
0x200: feffffffffffffff     | 	.quad -2
0x208: 0300000000000000     | 	.quad 3
0x210: 0400000000000000     | 	.quad 4
0x218: fbffffffffffffff     | 	.quad -5
0x220: 0600000000000000     | 	.quad 6
0x228: f9ffffffffffffff     | 	.quad -7
0x230: 0800000000000000     | 	.quad 8
0x238: f7ffffffffffffff     | 	.quad -9
0x240: f6ffffffffffffff     | 	.quad -10
0x248: 0b00000000000000     | 	.quad 11
0x250: 0c00000000000000     | 	.quad 12
0x258: f3ffffffffffffff     | 	.quad -13
0x260: 0e00000000000000     | 	.quad 14
0x268: f1ffffffffffffff     | 	.quad -15
0x270: f0ffffffffffffff     | 	.quad -16
0x278: 1100000000000000     | 	.quad 17
0x280: eeffffffffffffff     | 	.quad -18
0x288: 1300000000000000     | 	.quad 19
0x290: 1400000000000000     | 	.quad 20
0x298: 1500000000000000     | 	.quad 21
0x2a0: eaffffffffffffff     | 	.quad -22
0x2a8: 1700000000000000     | 	.quad 23
0x2b0: e8ffffffffffffff     | 	.quad -24
0x2b8: 1900000000000000     | 	.quad 25
0x2c0: e6ffffffffffffff     | 	.quad -26
0x2c8: e5ffffffffffffff     | 	.quad -27
0x2d0: 1c00000000000000     | 	.quad 28
0x2d8: 1d00000000000000     | 	.quad 29
0x2e0: 1e00000000000000     | 	.quad 30
0x2e8: e1ffffffffffffff     | 	.quad -31
0x2f0: 2000000000000000     | 	.quad 32
0x2f8: 2100000000000000     | 	.quad 33
0x300: 2200000000000000     | 	.quad 34
0x308: 2300000000000000     | 	.quad 35
0x310: dcffffffffffffff     | 	.quad -36
0x318: dbffffffffffffff     | 	.quad -37
0x320: 2600000000000000     | 	.quad 38
0x328: d9ffffffffffffff     | 	.quad -39
0x330: 2800000000000000     | 	.quad 40
0x338: 2900000000000000     | 	.quad 41
0x340: d6ffffffffffffff     | 	.quad -42
0x348: 2b00000000000000     | 	.quad 43
0x350: 2c00000000000000     | 	.quad 44
0x358: 2d00000000000000     | 	.quad 45
0x360: 2e00000000000000     | 	.quad 46
0x368: 2f00000000000000     | 	.quad 47
0x370: 3000000000000000     | 	.quad 48
0x378: 3100000000000000     | 	.quad 49
0x380: ceffffffffffffff     | 	.quad -50
0x388: cdffffffffffffff     | 	.quad -51
0x390: ccffffffffffffff     | 	.quad -52
0x398: 3500000000000000     | 	.quad 53
0x3a0: caffffffffffffff     | 	.quad -54
0x3a8: c9ffffffffffffff     | 	.quad -55
0x3b0: c8ffffffffffffff     | 	.quad -56
0x3b8: c7ffffffffffffff     | 	.quad -57
0x3c0: c6ffffffffffffff     | 	.quad -58
0x3c8: c5ffffffffffffff     | 	.quad -59
0x3d0: c4ffffffffffffff     | 	.quad -60
0x3d8: c3ffffffffffffff     | 	.quad -61
0x3e0: c2ffffffffffffff     | 	.quad -62
0x3e8: c1ffffffffffffff     | 	.quad -63
0x3f0: fadebc0000000000     | 	.quad 0xbcdefa # This shouldn't get moved
                            | 
0x400:                      | 	.align 16
0x400:                      | Predest:
0x400: fadebc0000000000     | 	.quad 0xbcdefa
0x408:                      | dest:
0x408: abefcd0000000000     | 	.quad 0xcdefab
0x410: abefcd0000000000     | 	.quad 0xcdefab
0x418: abefcd0000000000     | 	.quad 0xcdefab
0x420: abefcd0000000000     | 	.quad 0xcdefab
0x428: abefcd0000000000     | 	.quad 0xcdefab
0x430: abefcd0000000000     | 	.quad 0xcdefab
0x438: abefcd0000000000     | 	.quad 0xcdefab
0x440: abefcd0000000000     | 	.quad 0xcdefab
0x448: abefcd0000000000     | 	.quad 0xcdefab
0x450: abefcd0000000000     | 	.quad 0xcdefab
0x458: abefcd0000000000     | 	.quad 0xcdefab
0x460: abefcd0000000000     | 	.quad 0xcdefab
0x468: abefcd0000000000     | 	.quad 0xcdefab
0x470: abefcd0000000000     | 	.quad 0xcdefab
0x478: abefcd0000000000     | 	.quad 0xcdefab
0x480: abefcd0000000000     | 	.quad 0xcdefab
0x488: abefcd0000000000     | 	.quad 0xcdefab
0x490: abefcd0000000000     | 	.quad 0xcdefab
0x498: abefcd0000000000     | 	.quad 0xcdefab
0x4a0: abefcd0000000000     | 	.quad 0xcdefab
0x4a8: abefcd0000000000     | 	.quad 0xcdefab
0x4b0: abefcd0000000000     | 	.quad 0xcdefab
0x4b8: abefcd0000000000     | 	.quad 0xcdefab
0x4c0: abefcd0000000000     | 	.quad 0xcdefab
0x4c8: abefcd0000000000     | 	.quad 0xcdefab
0x4d0: abefcd0000000000     | 	.quad 0xcdefab
0x4d8: abefcd0000000000     | 	.quad 0xcdefab
0x4e0: abefcd0000000000     | 	.quad 0xcdefab
0x4e8: abefcd0000000000     | 	.quad 0xcdefab
0x4f0: abefcd0000000000     | 	.quad 0xcdefab
0x4f8: abefcd0000000000     | 	.quad 0xcdefab
0x500: abefcd0000000000     | 	.quad 0xcdefab
0x508: abefcd0000000000     | 	.quad 0xcdefab
0x510: abefcd0000000000     | 	.quad 0xcdefab
0x518: abefcd0000000000     | 	.quad 0xcdefab
0x520: abefcd0000000000     | 	.quad 0xcdefab
0x528: abefcd0000000000     | 	.quad 0xcdefab
0x530: abefcd0000000000     | 	.quad 0xcdefab
0x538: abefcd0000000000     | 	.quad 0xcdefab
0x540: abefcd0000000000     | 	.quad 0xcdefab
0x548: abefcd0000000000     | 	.quad 0xcdefab
0x550: abefcd0000000000     | 	.quad 0xcdefab
0x558: abefcd0000000000     | 	.quad 0xcdefab
0x560: abefcd0000000000     | 	.quad 0xcdefab
0x568: abefcd0000000000     | 	.quad 0xcdefab
0x570: abefcd0000000000     | 	.quad 0xcdefab
0x578: abefcd0000000000     | 	.quad 0xcdefab
0x580: abefcd0000000000     | 	.quad 0xcdefab
0x588: abefcd0000000000     | 	.quad 0xcdefab
0x590: abefcd0000000000     | 	.quad 0xcdefab
0x598: abefcd0000000000     | 	.quad 0xcdefab
0x5a0: abefcd0000000000     | 	.quad 0xcdefab
0x5a8: abefcd0000000000     | 	.quad 0xcdefab
0x5b0: abefcd0000000000     | 	.quad 0xcdefab
0x5b8: abefcd0000000000     | 	.quad 0xcdefab
0x5c0: abefcd0000000000     | 	.quad 0xcdefab
0x5c8: abefcd0000000000     | 	.quad 0xcdefab
0x5d0: abefcd0000000000     | 	.quad 0xcdefab
0x5d8: abefcd0000000000     | 	.quad 0xcdefab
0x5e0: abefcd0000000000     | 	.quad 0xcdefab
0x5e8: abefcd0000000000     | 	.quad 0xcdefab
0x5f0: abefcd0000000000     | 	.quad 0xcdefab
0x5f8: abefcd0000000000     | 	.quad 0xcdefab
0x600:                      | Postdest:
0x600: bcfade0000000000     | 	.quad 0xdefabc
                            | 
0x608:                      | .align 8
                            | # Run time stack
0x608: 0000000000000000     | 	.quad 0
0x610: 0000000000000000     | 	.quad 0
0x618: 0000000000000000     | 	.quad 0
0x620: 0000000000000000     | 	.quad 0
0x628: 0000000000000000     | 	.quad 0
0x630: 0000000000000000     | 	.quad 0
0x638: 0000000000000000     | 	.quad 0
0x640: 0000000000000000     | 	.quad 0
0x648: 0000000000000000     | 	.quad 0
0x650: 0000000000000000     | 	.quad 0
0x658: 0000000000000000     | 	.quad 0
0x660: 0000000000000000     | 	.quad 0
0x668: 0000000000000000     | 	.quad 0
0x670: 0000000000000000     | 	.quad 0
0x678: 0000000000000000     | 	.quad 0
0x680: 0000000000000000     | 	.quad 0
                            | 
0x688:                      | Stack:
