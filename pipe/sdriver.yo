                            | #######################################################################
                            | # Test for copying block of size 4;
                            | #######################################################################
0x000:                      | 	.pos 0
0x000: 30f47003000000000000 | main:	irmovq Stack, %rsp  	# Set up stack pointer
                            | 
                            | 	# Set up arguments for copy function and then invoke it
0x00a: 30f20400000000000000 | 	irmovq $4, %rdx		# src and dst have 4 elements
0x014: 30f6c802000000000000 | 	irmovq dest, %rsi	# dst array
0x01e: 30f79002000000000000 | 	irmovq src, %rdi	# src array
0x028: 803200000000000000   | 	call ncopy		 
0x031: 00                   | 	halt			# should halt with num nonzeros in %rax
0x032:                      | StartFun:
                            | #/* $begin ncopy-ys */
                            | ##################################################################
                            | # ncopy.ys - Copy a src block of len words to dst.
                            | # Return the number of positive words (>0) contained in src.
                            | #
                            | # Include your name and ID here.
                            | # Gao Zhiyuan
                            | # 2017-81842
                            | #
                            | # Describe how and why you modified the baseline code.
                            | #
                            | ##################################################################
                            | # Do not modify this portion
                            | # Function prologue.
                            | # %rdi = src, %rsi = dst, %rdx = len
0x032:                      | ncopy:
                            | 
                            | ##################################################################
                            | # You can modify this portion
                            | 	# Loop header
                            | 	#xorq %rax, %rax		# count = 0;
0x032: c0f2fbffffffffffffff | 	iaddq $-5, %rdx		# len <= 5
0x03c: 713901000000000000   | 	jle Rolling		# if so, goto Rolling:
0x045:                      | Loop:
0x045: 50a70000000000000000 | 	mrmovq (%rdi), %r10	# read val from src...
0x04f: 50b70800000000000000 | 	mrmovq 8(%rdi), %r11	# read val from src...
0x059: 50c71000000000000000 | 	mrmovq 16(%rdi), %r12	# read val from src...
0x063: 50d71800000000000000 | 	mrmovq 24(%rdi), %r13	# read val from src...
0x06d: 50e72000000000000000 | 	mrmovq 32(%rdi), %r14	# read val from src...
                            | 
                            | 
0x077: 62aa                 | 	andq %r10, %r10		# val <= 0?
0x079: 40c61000000000000000 | 	rmmovq %r12, 16(%rsi)	# ...and store it to dst
0x083: 40d61800000000000000 | 	rmmovq %r13, 24(%rsi)	# ...and store it to dst
0x08d: 40e62000000000000000 | 	rmmovq %r14, 32(%rsi)	# ...and store it to dst
0x097: 40a60000000000000000 | 	rmmovq %r10, (%rsi)	# ...and store it to dst
0x0a1: 40b60800000000000000 | 	rmmovq %r11, 8(%rsi)	# ...and store it to dst
                            | 
0x0ab: 71be00000000000000   | 	jle Npos1		# if so, goto Npos:
0x0b4: c0f00100000000000000 | 	iaddq $1, %rax		# count++
0x0be:                      | Npos1:
                            | 	
0x0be: 62bb                 | 	andq %r11, %r11		# val <= 0?
0x0c0: 71d300000000000000   | 	jle Npos2		# if so, goto Npos:
0x0c9: c0f00100000000000000 | 	iaddq $1, %rax		# count++
0x0d3:                      | Npos2:
                            | 
0x0d3: 62cc                 | 	andq %r12, %r12		# val <= 0?
0x0d5: 71e800000000000000   | 	jle Npos3		# if so, goto Npos:
0x0de: c0f00100000000000000 | 	iaddq $1, %rax		# count++
0x0e8:                      | Npos3:
0x0e8: 62dd                 | 	andq %r13, %r13		# val <= 0?
0x0ea: 71fd00000000000000   | 	jle Npos4		# if so, goto Npos:
0x0f3: c0f00100000000000000 | 	iaddq $1, %rax		# count++
0x0fd:                      | Npos4:
0x0fd: c0f72800000000000000 | 	iaddq $40, %rdi
0x107: c0f62800000000000000 | 	iaddq $40, %rsi
0x111: 62ee                 | 	andq %r14, %r14		# val <= 0?
0x113: 712601000000000000   | 	jle Npos5		# if so, goto Npos:
0x11c: c0f00100000000000000 | 	iaddq $1, %rax		# count++
0x126:                      | Npos5:
0x126: c0f2fbffffffffffffff | 	iaddq $-5, %rdx		# len >= 3?	
0x130: 764500000000000000   | 	jg Loop		# if so, len -= 3; goto Loop:
                            | 
0x139:                      | Rolling:
0x139: 73a801000000000000   | 	je ADD5
0x142: c0f20500000000000000 | 	iaddq $5, %rdx
0x14c: 718902000000000000   | 	jle Done
                            | 
0x155:                      | RLoop:
0x155: 50a70000000000000000 | 	mrmovq (%rdi), %r10	
0x15f: 40a60000000000000000 | 	rmmovq %r10, (%rsi)
0x169: 62aa                 | 	andq %r10, %r10
0x16b: 717e01000000000000   | 	jle Npos
0x174: c0f00100000000000000 | 	iaddq $1, %rax		# counter++
0x17e:                      | Npos:
0x17e: c0f2ffffffffffffffff | 	iaddq $-1, %rdx		# len--
0x188: c0f70800000000000000 | 	iaddq $8, %rdi	
0x192: c0f60800000000000000 | 	iaddq $8, %rsi
0x19c: 6222                 | 	andq %rdx, %rdx
0x19e: 765501000000000000   | 	jg RLoop
0x1a7: 90                   | 	ret
                            | 
0x1a8:                      | ADD5:
0x1a8: 50a70000000000000000 | 	mrmovq (%rdi), %r10	# read val from src...
0x1b2: 50b70800000000000000 | 	mrmovq 8(%rdi), %r11	# read val from src...
0x1bc: 50c71000000000000000 | 	mrmovq 16(%rdi), %r12	# read val from src...
0x1c6: 50d71800000000000000 | 	mrmovq 24(%rdi), %r13	# read val from src...
0x1d0: 50e72000000000000000 | 	mrmovq 32(%rdi), %r14	# read val from src...
                            | 
                            | 
0x1da: 62aa                 | 	andq %r10, %r10		# val <= 0?
0x1dc: 40c61000000000000000 | 	rmmovq %r12, 16(%rsi)	# ...and store it to dst
0x1e6: 40d61800000000000000 | 	rmmovq %r13, 24(%rsi)	# ...and store it to dst
0x1f0: 40e62000000000000000 | 	rmmovq %r14, 32(%rsi)	# ...and store it to dst
0x1fa: 40a60000000000000000 | 	rmmovq %r10, (%rsi)	# ...and store it to dst
0x204: 40b60800000000000000 | 	rmmovq %r11, 8(%rsi)	# ...and store it to dst
                            | 
0x20e: 71be00000000000000   | 	jle Npos1		# if so, goto Npos:
0x217: c0f00100000000000000 | 	iaddq $1, %rax		# count++
0x221:                      | Npos1:
                            | 	
0x221: 62bb                 | 	andq %r11, %r11		# val <= 0?
0x223: 71d300000000000000   | 	jle Npos2		# if so, goto Npos:
0x22c: c0f00100000000000000 | 	iaddq $1, %rax		# count++
0x236:                      | Npos2:
                            | 
0x236: 62cc                 | 	andq %r12, %r12		# val <= 0?
0x238: 71e800000000000000   | 	jle Npos3		# if so, goto Npos:
0x241: c0f00100000000000000 | 	iaddq $1, %rax		# count++
0x24b:                      | Npos3:
0x24b: 62dd                 | 	andq %r13, %r13		# val <= 0?
0x24d: 71fd00000000000000   | 	jle Npos4		# if so, goto Npos:
0x256: c0f00100000000000000 | 	iaddq $1, %rax		# count++
0x260:                      | Npos4:
0x260: c0f72800000000000000 | 	iaddq $40, %rdi
0x26a: c0f62800000000000000 | 	iaddq $40, %rsi
0x274: 62ee                 | 	andq %r14, %r14		# val <= 0?
0x276: 712601000000000000   | 	jle Npos5		# if so, goto Npos:
0x27f: c0f00100000000000000 | 	iaddq $1, %rax		# count++
0x289:                      | Npos5:
                            | 	
                            | 
                            | 
                            | ##################################################################
                            | # Do not modify the following section of code
                            | # Function epilogue.
0x289:                      | Done:
0x289: 90                   | 	ret
                            | ##################################################################
                            | # Keep the following label at the end of your function
0x28a:                      | End:
                            | #/* $end ncopy-ys */
0x28a:                      | EndFun:
                            | 
                            | ###############################
                            | # Source and destination blocks 
                            | ###############################
0x290:                      | 	.align 8
0x290:                      | src:
0x290: 0100000000000000     | 	.quad 1
0x298: feffffffffffffff     | 	.quad -2
0x2a0: 0300000000000000     | 	.quad 3
0x2a8: fcffffffffffffff     | 	.quad -4
0x2b0: fadebc0000000000     | 	.quad 0xbcdefa # This shouldn't get moved
                            | 
0x2c0:                      | 	.align 16
0x2c0:                      | Predest:
0x2c0: fadebc0000000000     | 	.quad 0xbcdefa
0x2c8:                      | dest:
0x2c8: abefcd0000000000     | 	.quad 0xcdefab
0x2d0: abefcd0000000000     | 	.quad 0xcdefab
0x2d8: abefcd0000000000     | 	.quad 0xcdefab
0x2e0: abefcd0000000000     | 	.quad 0xcdefab
0x2e8:                      | Postdest:
0x2e8: bcfade0000000000     | 	.quad 0xdefabc
                            | 
0x2f0:                      | .align 8
                            | # Run time stack
0x2f0: 0000000000000000     | 	.quad 0
0x2f8: 0000000000000000     | 	.quad 0
0x300: 0000000000000000     | 	.quad 0
0x308: 0000000000000000     | 	.quad 0
0x310: 0000000000000000     | 	.quad 0
0x318: 0000000000000000     | 	.quad 0
0x320: 0000000000000000     | 	.quad 0
0x328: 0000000000000000     | 	.quad 0
0x330: 0000000000000000     | 	.quad 0
0x338: 0000000000000000     | 	.quad 0
0x340: 0000000000000000     | 	.quad 0
0x348: 0000000000000000     | 	.quad 0
0x350: 0000000000000000     | 	.quad 0
0x358: 0000000000000000     | 	.quad 0
0x360: 0000000000000000     | 	.quad 0
0x368: 0000000000000000     | 	.quad 0
                            | 
0x370:                      | Stack:
