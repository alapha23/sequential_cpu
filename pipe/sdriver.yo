                            | #######################################################################
                            | # Test for copying block of size 4;
                            | #######################################################################
0x000:                      | 	.pos 0
0x000: 30f4e003000000000000 | main:	irmovq Stack, %rsp  	# Set up stack pointer
                            | 
                            | 	# Set up arguments for copy function and then invoke it
0x00a: 30f20400000000000000 | 	irmovq $4, %rdx		# src and dst have 4 elements
0x014: 30f63803000000000000 | 	irmovq dest, %rsi	# dst array
0x01e: 30f70803000000000000 | 	irmovq src, %rdi	# src array
0x028: 803200000000000000   | 	call ncopy		 
0x031: 00                   | 	halt			# should halt with num nonzeros in %rax
0x032:                      | StartFun:
                            | #/* $begin ncopy-ys */
                            | ##################################################################
                            | # ncopy.ys - Copy a src block of len words to dst.
                            | # Return the number of positive words (>0) contained in src.
                            | #
                            | # Include your name and ID here.
                            | # Gao Zhiyuan
                            | # 2017-81842
                            | #
                            | # Describe how and why you modified the baseline code.
                            | #
                            | ##################################################################
                            | # Do not modify this portion
                            | # Function prologue.
                            | # %rdi = src, %rsi = dst, %rdx = len
0x032:                      | ncopy:
                            | 
                            | ##################################################################
                            | # You can modify this portion
                            | 	# Loop header
                            | 	#xorq %rax, %rax		# count = 0;
0x032: c0f2fcffffffffffffff | 	iaddq $-4, %rdx		# len <= 5
0x03c: 711001000000000000   | 	jle Rolling		# if so, goto Rolling:
0x045:                      | Loop:
0x045: 50a70000000000000000 | 	mrmovq (%rdi), %r10	# read val from src...
0x04f: 50b70800000000000000 | 	mrmovq 8(%rdi), %r11	# read val from src...
0x059: 50c71000000000000000 | 	mrmovq 16(%rdi), %r12	# read val from src...
0x063: 50d71800000000000000 | 	mrmovq 24(%rdi), %r13	# read val from src...
                            | 
                            | 
0x06d: 62aa                 | 	andq %r10, %r10		# val <= 0?
0x06f: 40c61000000000000000 | 	rmmovq %r12, 16(%rsi)	# ...and store it to dst
0x079: 40d61800000000000000 | 	rmmovq %r13, 24(%rsi)	# ...and store it to dst
0x083: 40a60000000000000000 | 	rmmovq %r10, (%rsi)	# ...and store it to dst
0x08d: 40b60800000000000000 | 	rmmovq %r11, 8(%rsi)	# ...and store it to dst
                            | 
0x097: 71aa00000000000000   | 	jle Npos1		# if so, goto Npos:
0x0a0: c0f00100000000000000 | 	iaddq $1, %rax		# count++
0x0aa:                      | Npos1:
                            | 	
0x0aa: 62bb                 | 	andq %r11, %r11		# val <= 0?
0x0ac: 71bf00000000000000   | 	jle Npos2		# if so, goto Npos:
0x0b5: c0f00100000000000000 | 	iaddq $1, %rax		# count++
0x0bf:                      | Npos2:
                            | 
0x0bf: 62cc                 | 	andq %r12, %r12		# val <= 0?
0x0c1: 71d400000000000000   | 	jle Npos3		# if so, goto Npos:
0x0ca: c0f00100000000000000 | 	iaddq $1, %rax		# count++
0x0d4:                      | Npos3:
0x0d4: 62dd                 | 	andq %r13, %r13		# val <= 0?
0x0d6: 71e900000000000000   | 	jle Npos4		# if so, goto Npos:
0x0df: c0f00100000000000000 | 	iaddq $1, %rax		# count++
0x0e9:                      | Npos4:
0x0e9: c0f72000000000000000 | 	iaddq $32, %rdi
0x0f3: c0f62000000000000000 | 	iaddq $32, %rsi
                            | 
0x0fd: c0f2fcffffffffffffff | 	iaddq $-4, %rdx		# len >= 3?	
0x107: 764500000000000000   | 	jg Loop		# if so, len -= 3; goto Loop:
                            | 
0x110:                      | Rolling:
0x110: 735e02000000000000   | 	je ADD4
0x119: c0f20100000000000000 | 	iaddq $1, %rdx
0x123: 73e201000000000000   | 	je ADD3
0x12c: c0f20100000000000000 | 	iaddq $1, %rdx
0x136: 736501000000000000   | 	je ADD2
0x13f: c0f20100000000000000 | 	iaddq $1, %rdx
0x149: 73b801000000000000   | 	je ADD1
0x152: c0f20100000000000000 | 	iaddq $1, %rdx
0x15c: 710203000000000000   | 	jle Done
0x165:                      | ADD2:
0x165: 50a70000000000000000 | 	mrmovq (%rdi), %r10	# read val from src...
0x16f: 50b70800000000000000 | 	mrmovq 8(%rdi), %r11	# read val from src...
                            | 
0x179: 62aa                 | 	andq %r10, %r10		# val <= 0?
0x17b: 40a60000000000000000 | 	rmmovq %r10, (%rsi)	# ...and store it to dst
0x185: 40b60800000000000000 | 	rmmovq %r11, 8(%rsi)	# ...and store it to dst
                            | 
0x18f: 71a201000000000000   | 	jle ADD2N		# if so, goto Npos:
0x198: c0f00100000000000000 | 	iaddq $1, %rax		# count++
0x1a2:                      | ADD2N:
0x1a2: 62bb                 | 	andq %r11, %r11
0x1a4: 710203000000000000   | 	jle Done
0x1ad: c0f00100000000000000 | 	iaddq $1, %rax
0x1b7: 90                   | 	ret
0x1b8:                      | ADD1:
0x1b8: 50a70000000000000000 | 	mrmovq (%rdi), %r10	# read val from src...
0x1c2: 62aa                 | 	andq %r10, %r10		# val <= 0?
0x1c4: 40a60000000000000000 | 	rmmovq %r10, (%rsi)	# ...and store it to dst
0x1ce: 710203000000000000   | 	jle Done		# if so, goto Npos:
0x1d7: c0f00100000000000000 | 	iaddq $1, %rax		# count++
0x1e1: 90                   | 	ret
0x1e2:                      | ADD3:
0x1e2: 50a70000000000000000 | 	mrmovq (%rdi), %r10	# read val from src...
0x1ec: 50b70800000000000000 | 	mrmovq 8(%rdi), %r11	# read val from src...
0x1f6: 50c71000000000000000 | 	mrmovq 16(%rdi), %r12	# read val from src...
                            | 
0x200: 62aa                 | 	andq %r10, %r10		# val <= 0?
0x202: 40c61000000000000000 | 	rmmovq %r12, 16(%rsi)	# ...and store it to dst
0x20c: 40a60000000000000000 | 	rmmovq %r10, (%rsi)	# ...and store it to dst
0x216: 40b60800000000000000 | 	rmmovq %r11, 8(%rsi)	# ...and store it to dst
                            | 
0x220: 713302000000000000   | 	jle Nposadd31		# if so, goto Npos:
0x229: c0f00100000000000000 | 	iaddq $1, %rax		# count++
0x233:                      | Nposadd31:
                            | 	
0x233: 62bb                 | 	andq %r11, %r11		# val <= 0?
0x235: 714802000000000000   | 	jle Nposadd32		# if so, goto Npos:
0x23e: c0f00100000000000000 | 	iaddq $1, %rax		# count++
0x248:                      | Nposadd32:
                            | 
0x248: 62cc                 | 	andq %r12, %r12		# val <= 0?
0x24a: 710203000000000000   | 	jle Done		# if so, goto Npos:
0x253: c0f00100000000000000 | 	iaddq $1, %rax		# count++
0x25d: 90                   | 	ret
0x25e:                      | ADD4:
0x25e: 50a70000000000000000 | 	mrmovq (%rdi), %r10	# read val from src...
0x268: 50b70800000000000000 | 	mrmovq 8(%rdi), %r11	# read val from src...
0x272: 50c71000000000000000 | 	mrmovq 16(%rdi), %r12	# read val from src...
0x27c: 50d71800000000000000 | 	mrmovq 24(%rdi), %r13	# read val from src...
                            | 
0x286: 62aa                 | 	andq %r10, %r10		# val <= 0?
0x288: 40c61000000000000000 | 	rmmovq %r12, 16(%rsi)	# ...and store it to dst
0x292: 40d61800000000000000 | 	rmmovq %r13, 24(%rsi)	# ...and store it to dst
0x29c: 40a60000000000000000 | 	rmmovq %r10, (%rsi)	# ...and store it to dst
0x2a6: 40b60800000000000000 | 	rmmovq %r11, 8(%rsi)	# ...and store it to dst
                            | 
0x2b0: 71c302000000000000   | 	jle Nposadd41		# if so, goto Npos:
0x2b9: c0f00100000000000000 | 	iaddq $1, %rax		# count++
0x2c3:                      | Nposadd41:
                            | 	
0x2c3: 62bb                 | 	andq %r11, %r11		# val <= 0?
0x2c5: 71d802000000000000   | 	jle Nposadd42		# if so, goto Npos:
0x2ce: c0f00100000000000000 | 	iaddq $1, %rax		# count++
0x2d8:                      | Nposadd42:
                            | 
0x2d8: 62cc                 | 	andq %r12, %r12		# val <= 0?
0x2da: 71ed02000000000000   | 	jle Nposadd43		# if so, goto Npos:
0x2e3: c0f00100000000000000 | 	iaddq $1, %rax		# count++
0x2ed:                      | Nposadd43:
0x2ed: 62dd                 | 	andq %r13, %r13		# val <= 0?
0x2ef: 710203000000000000   | 	jle Done		# if so, goto Npos:
0x2f8: c0f00100000000000000 | 	iaddq $1, %rax		# count++
                            | 
                            | 
                            | ##################################################################
                            | # Do not modify the following section of code
                            | # Function epilogue.
0x302:                      | Done:
0x302: 90                   | 	ret
                            | ##################################################################
                            | # Keep the following label at the end of your function
0x303:                      | End:
                            | #/* $end ncopy-ys */
0x303:                      | EndFun:
                            | 
                            | ###############################
                            | # Source and destination blocks 
                            | ###############################
0x308:                      | 	.align 8
0x308:                      | src:
0x308: ffffffffffffffff     | 	.quad -1
0x310: feffffffffffffff     | 	.quad -2
0x318: 0300000000000000     | 	.quad 3
0x320: 0400000000000000     | 	.quad 4
0x328: fadebc0000000000     | 	.quad 0xbcdefa # This shouldn't get moved
                            | 
0x330:                      | 	.align 16
0x330:                      | Predest:
0x330: fadebc0000000000     | 	.quad 0xbcdefa
0x338:                      | dest:
0x338: abefcd0000000000     | 	.quad 0xcdefab
0x340: abefcd0000000000     | 	.quad 0xcdefab
0x348: abefcd0000000000     | 	.quad 0xcdefab
0x350: abefcd0000000000     | 	.quad 0xcdefab
0x358:                      | Postdest:
0x358: bcfade0000000000     | 	.quad 0xdefabc
                            | 
0x360:                      | .align 8
                            | # Run time stack
0x360: 0000000000000000     | 	.quad 0
0x368: 0000000000000000     | 	.quad 0
0x370: 0000000000000000     | 	.quad 0
0x378: 0000000000000000     | 	.quad 0
0x380: 0000000000000000     | 	.quad 0
0x388: 0000000000000000     | 	.quad 0
0x390: 0000000000000000     | 	.quad 0
0x398: 0000000000000000     | 	.quad 0
0x3a0: 0000000000000000     | 	.quad 0
0x3a8: 0000000000000000     | 	.quad 0
0x3b0: 0000000000000000     | 	.quad 0
0x3b8: 0000000000000000     | 	.quad 0
0x3c0: 0000000000000000     | 	.quad 0
0x3c8: 0000000000000000     | 	.quad 0
0x3d0: 0000000000000000     | 	.quad 0
0x3d8: 0000000000000000     | 	.quad 0
                            | 
0x3e0:                      | Stack:
