#######################################################################
# Test for copying block of size 4;
#######################################################################
	.pos 0
main:	irmovq Stack, %rsp  	# Set up stack pointer

	# Set up arguments for copy function and then invoke it
	irmovq $4, %rdx		# src and dst have 4 elements
	irmovq dest, %rsi	# dst array
	irmovq src, %rdi	# src array
	call ncopy		 
	halt			# should halt with num nonzeros in %rax
StartFun:
#/* $begin ncopy-ys */
##################################################################
# ncopy.ys - Copy a src block of len words to dst.
# Return the number of positive words (>0) contained in src.
#
# Include your name and ID here.
# Gao Zhiyuan
# 2017-81842
#
# Describe how and why you modified the baseline code.
#
##################################################################
# Do not modify this portion
# Function prologue.
# %rdi = src, %rsi = dst, %rdx = len
ncopy:

##################################################################
# You can modify this portion
	# Loop header
	xorq %rax, %rax		# count = 0;
	iaddq $-2, %rdx		# len <= 2
	jle Rolling		# if so, goto Rolling:
	iaddq $-1, %rdx	
Loop:
	mrmovq (%rdi), %r10	# read val from src...
	rmmovq %r10, (%rsi)	# ...and store it to dst
	iaddq $8, %rdi
	iaddq $8, %rsi

	mrmovq (%rdi), %r11	# read val from src...
	rmmovq %r11, (%rsi)	# ...and store it to dst
	iaddq $8, %rdi
	iaddq $8, %rsi

	mrmovq (%rdi), %r12	# read val from src...
	rmmovq %r12, (%rsi)	# ...and store it to dst
	iaddq $8, %rdi
	iaddq $8, %rsi

#	mrmovq (%rdi), %r13	# read val from src...
#	rmmovq %r13, (%rsi)	# ...and store it to dst
#	iaddq $8, %rdi
#	iaddq $8, %rsi

	andq %r10, %r10		# val <= 0?
	jle Npos1		# if so, goto Npos:
	iaddq $1, %rax		# count++
Npos1:
	andq %r11, %r11		# val <= 0?
	jle Npos2		# if so, goto Npos:
	iaddq $1, %rax		# count++
Npos2:
	andq %r12, %r12		# val <= 0?
	jle Npos3		# if so, goto Npos:
	iaddq $1, %rax		# count++
Npos3:
	iaddq $-3, %rdx		# len >= 3?	
	jg Loop		# if so, len -= 3; goto Loop:
	iaddq $1, %rdx

Rolling:
	iaddq $2, %rdx
	andq %rdx, %rdx		# if len <= 0
	jle Done

RLoop:
	mrmovq (%rdi), %r10	
	rmmovq %r10, (%rsi)
	andq %r10, %r10
	jle Npos
	iaddq $1, %rax		# counter++
Npos:
	iaddq $-1, %rdx		# len--
	iaddq $8, %rdi	
	iaddq $8, %rsi
	andq %rdx, %rdx
	jg RLoop
##################################################################
# Do not modify the following section of code
# Function epilogue.
Done:
	ret
##################################################################
# Keep the following label at the end of your function
End:
#/* $end ncopy-ys */
EndFun:

###############################
# Source and destination blocks 
###############################
	.align 8
src:
	.quad 1
	.quad -2
	.quad 3
	.quad -4
	.quad 0xbcdefa # This shouldn't get moved

	.align 16
Predest:
	.quad 0xbcdefa
dest:
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
Postdest:
	.quad 0xdefabc

.align 8
# Run time stack
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0

Stack:
