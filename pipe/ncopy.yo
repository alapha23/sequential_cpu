                            | #/* $begin ncopy-ys */
                            | ##################################################################
                            | # ncopy.ys - Copy a src block of len words to dst.
                            | # Return the number of positive words (>0) contained in src.
                            | #
                            | # Include your name and ID here.
                            | # Gao Zhiyuan
                            | # 2017-81842
                            | #
                            | # Describe how and why you modified the baseline code.
                            | #
                            | ##################################################################
                            | # Do not modify this portion
                            | # Function prologue.
                            | # %rdi = src, %rsi = dst, %rdx = len
0x000:                      | ncopy:
                            | 
                            | ##################################################################
                            | # You can modify this portion
                            | 	# Loop header
                            | 	#xorq %rax, %rax		# count = 0;
0x000: c0f2fbffffffffffffff | 	iaddq $-5, %rdx		# len <= 5
0x00a: 710701000000000000   | 	jle Rolling		# if so, goto Rolling:
0x013:                      | Loop:
0x013: 50a70000000000000000 | 	mrmovq (%rdi), %r10	# read val from src...
0x01d: 50b70800000000000000 | 	mrmovq 8(%rdi), %r11	# read val from src...
0x027: 50c71000000000000000 | 	mrmovq 16(%rdi), %r12	# read val from src...
0x031: 50d71800000000000000 | 	mrmovq 24(%rdi), %r13	# read val from src...
0x03b: 50e72000000000000000 | 	mrmovq 32(%rdi), %r14	# read val from src...
                            | 
                            | 
0x045: 62aa                 | 	andq %r10, %r10		# val <= 0?
0x047: 40c61000000000000000 | 	rmmovq %r12, 16(%rsi)	# ...and store it to dst
0x051: 40d61800000000000000 | 	rmmovq %r13, 24(%rsi)	# ...and store it to dst
0x05b: 40e62000000000000000 | 	rmmovq %r14, 32(%rsi)	# ...and store it to dst
0x065: 40a60000000000000000 | 	rmmovq %r10, (%rsi)	# ...and store it to dst
0x06f: 40b60800000000000000 | 	rmmovq %r11, 8(%rsi)	# ...and store it to dst
                            | 
0x079: 718c00000000000000   | 	jle Npos1		# if so, goto Npos:
0x082: c0f00100000000000000 | 	iaddq $1, %rax		# count++
0x08c:                      | Npos1:
                            | 	
0x08c: 62bb                 | 	andq %r11, %r11		# val <= 0?
0x08e: 71a100000000000000   | 	jle Npos2		# if so, goto Npos:
0x097: c0f00100000000000000 | 	iaddq $1, %rax		# count++
0x0a1:                      | Npos2:
                            | 
0x0a1: 62cc                 | 	andq %r12, %r12		# val <= 0?
0x0a3: 71b600000000000000   | 	jle Npos3		# if so, goto Npos:
0x0ac: c0f00100000000000000 | 	iaddq $1, %rax		# count++
0x0b6:                      | Npos3:
0x0b6: 62dd                 | 	andq %r13, %r13		# val <= 0?
0x0b8: 71cb00000000000000   | 	jle Npos4		# if so, goto Npos:
0x0c1: c0f00100000000000000 | 	iaddq $1, %rax		# count++
0x0cb:                      | Npos4:
0x0cb: c0f72800000000000000 | 	iaddq $40, %rdi
0x0d5: c0f62800000000000000 | 	iaddq $40, %rsi
0x0df: 62ee                 | 	andq %r14, %r14		# val <= 0?
0x0e1: 71f400000000000000   | 	jle Npos5		# if so, goto Npos:
0x0ea: c0f00100000000000000 | 	iaddq $1, %rax		# count++
0x0f4:                      | Npos5:
0x0f4: c0f2fbffffffffffffff | 	iaddq $-5, %rdx		# len >= 3?	
0x0fe: 761300000000000000   | 	jg Loop		# if so, len -= 3; goto Loop:
                            | 
0x107:                      | Rolling:
0x107: 738901000000000000   | 	je ADD5
0x110: c0f20400000000000000 | 	iaddq $4, %rdx
0x11a: 736b02000000000000   | 	je ADD1
0x123: c0f20100000000000000 | 	iaddq $1, %rdx
0x12d: 719402000000000000   | 	jle Done
                            | 
0x136:                      | RLoop:
0x136: 50a70000000000000000 | 	mrmovq (%rdi), %r10	
0x140: 40a60000000000000000 | 	rmmovq %r10, (%rsi)
0x14a: 62aa                 | 	andq %r10, %r10
0x14c: 715f01000000000000   | 	jle Npos
0x155: c0f00100000000000000 | 	iaddq $1, %rax		# counter++
0x15f:                      | Npos:
0x15f: c0f2ffffffffffffffff | 	iaddq $-1, %rdx		# len--
0x169: c0f70800000000000000 | 	iaddq $8, %rdi	
0x173: c0f60800000000000000 | 	iaddq $8, %rsi
0x17d: 6222                 | 	andq %rdx, %rdx
0x17f: 763601000000000000   | 	jg RLoop
0x188: 90                   | 	ret
                            | 
0x189:                      | ADD5:
0x189: 50a70000000000000000 | 	mrmovq (%rdi), %r10	# read val from src...
0x193: 50b70800000000000000 | 	mrmovq 8(%rdi), %r11	# read val from src...
0x19d: 50c71000000000000000 | 	mrmovq 16(%rdi), %r12	# read val from src...
0x1a7: 50d71800000000000000 | 	mrmovq 24(%rdi), %r13	# read val from src...
0x1b1: 50e72000000000000000 | 	mrmovq 32(%rdi), %r14	# read val from src...
                            | 
                            | 
0x1bb: 62aa                 | 	andq %r10, %r10		# val <= 0?
0x1bd: 40c61000000000000000 | 	rmmovq %r12, 16(%rsi)	# ...and store it to dst
0x1c7: 40d61800000000000000 | 	rmmovq %r13, 24(%rsi)	# ...and store it to dst
0x1d1: 40e62000000000000000 | 	rmmovq %r14, 32(%rsi)	# ...and store it to dst
0x1db: 40a60000000000000000 | 	rmmovq %r10, (%rsi)	# ...and store it to dst
0x1e5: 40b60800000000000000 | 	rmmovq %r11, 8(%rsi)	# ...and store it to dst
                            | 
0x1ef: 718c00000000000000   | 	jle Npos1		# if so, goto Npos:
0x1f8: c0f00100000000000000 | 	iaddq $1, %rax		# count++
0x202:                      | Npos1:
                            | 	
0x202: 62bb                 | 	andq %r11, %r11		# val <= 0?
0x204: 71a100000000000000   | 	jle Npos2		# if so, goto Npos:
0x20d: c0f00100000000000000 | 	iaddq $1, %rax		# count++
0x217:                      | Npos2:
                            | 
0x217: 62cc                 | 	andq %r12, %r12		# val <= 0?
0x219: 71b600000000000000   | 	jle Npos3		# if so, goto Npos:
0x222: c0f00100000000000000 | 	iaddq $1, %rax		# count++
0x22c:                      | Npos3:
0x22c: 62dd                 | 	andq %r13, %r13		# val <= 0?
0x22e: 71cb00000000000000   | 	jle Npos4		# if so, goto Npos:
0x237: c0f00100000000000000 | 	iaddq $1, %rax		# count++
0x241:                      | Npos4:
0x241: c0f72800000000000000 | 	iaddq $40, %rdi
0x24b: c0f62800000000000000 | 	iaddq $40, %rsi
0x255: 62ee                 | 	andq %r14, %r14		# val <= 0?
0x257: 719402000000000000   | 	jle Done		# if so, goto Npos:
0x260: c0f00100000000000000 | 	iaddq $1, %rax		# count++
0x26a: 90                   | 	ret	
                            | 
0x26b:                      | ADD1:
0x26b: 50a70000000000000000 | 	mrmovq (%rdi), %r10	# read val from src...
0x275: 62aa                 | 	andq %r10, %r10		# val <= 0?
0x277: 40a60000000000000000 | 	rmmovq %r10, (%rsi)	# ...and store it to dst
0x281: 719402000000000000   | 	jle Done		# if so, goto Npos:
0x28a: c0f00100000000000000 | 	iaddq $1, %rax		# count++
                            | 	
                            | 
                            | ##################################################################
                            | # Do not modify the following section of code
                            | # Function epilogue.
0x294:                      | Done:
0x294: 90                   | 	ret
                            | ##################################################################
                            | # Keep the following label at the end of your function
0x295:                      | End:
                            | #/* $end ncopy-ys */
