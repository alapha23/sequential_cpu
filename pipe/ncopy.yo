                            | #/* $begin ncopy-ys */
                            | ##################################################################
                            | # ncopy.ys - Copy a src block of len words to dst.
                            | # Return the number of positive words (>0) contained in src.
                            | #
                            | # Include your name and ID here.
                            | # Gao Zhiyuan
                            | # 2017-81842
                            | #
                            | # Describe how and why you modified the baseline code.
                            | #
                            | ##################################################################
                            | # Do not modify this portion
                            | # Function prologue.
                            | # %rdi = src, %rsi = dst, %rdx = len
0x000:                      | ncopy:
                            | 
                            | ##################################################################
                            | # You can modify this portion
                            | 	# Loop header
                            | 	#xorq %rax, %rax		# count = 0;
0x000: c0f2fbffffffffffffff | 	iaddq $-5, %rdx		# len <= 5
0x00a: 710701000000000000   | 	jle Rolling		# if so, goto Rolling:
0x013:                      | Loop:
0x013: 50a70000000000000000 | 	mrmovq (%rdi), %r10	# read val from src...
0x01d: 50b70800000000000000 | 	mrmovq 8(%rdi), %r11	# read val from src...
0x027: 50c71000000000000000 | 	mrmovq 16(%rdi), %r12	# read val from src...
0x031: 50d71800000000000000 | 	mrmovq 24(%rdi), %r13	# read val from src...
0x03b: 50e72000000000000000 | 	mrmovq 32(%rdi), %r14	# read val from src...
                            | 
                            | 
0x045: 62aa                 | 	andq %r10, %r10		# val <= 0?
0x047: 40c61000000000000000 | 	rmmovq %r12, 16(%rsi)	# ...and store it to dst
0x051: 40d61800000000000000 | 	rmmovq %r13, 24(%rsi)	# ...and store it to dst
0x05b: 40e62000000000000000 | 	rmmovq %r14, 32(%rsi)	# ...and store it to dst
0x065: 40a60000000000000000 | 	rmmovq %r10, (%rsi)	# ...and store it to dst
0x06f: 40b60800000000000000 | 	rmmovq %r11, 8(%rsi)	# ...and store it to dst
                            | 
0x079: 718c00000000000000   | 	jle Npos1		# if so, goto Npos:
0x082: c0f00100000000000000 | 	iaddq $1, %rax		# count++
0x08c:                      | Npos1:
                            | 	
0x08c: 62bb                 | 	andq %r11, %r11		# val <= 0?
0x08e: 71a100000000000000   | 	jle Npos2		# if so, goto Npos:
0x097: c0f00100000000000000 | 	iaddq $1, %rax		# count++
0x0a1:                      | Npos2:
                            | 
0x0a1: 62cc                 | 	andq %r12, %r12		# val <= 0?
0x0a3: 71b600000000000000   | 	jle Npos3		# if so, goto Npos:
0x0ac: c0f00100000000000000 | 	iaddq $1, %rax		# count++
0x0b6:                      | Npos3:
0x0b6: 62dd                 | 	andq %r13, %r13		# val <= 0?
0x0b8: 71cb00000000000000   | 	jle Npos4		# if so, goto Npos:
0x0c1: c0f00100000000000000 | 	iaddq $1, %rax		# count++
0x0cb:                      | Npos4:
0x0cb: c0f72800000000000000 | 	iaddq $40, %rdi
0x0d5: c0f62800000000000000 | 	iaddq $40, %rsi
0x0df: 62ee                 | 	andq %r14, %r14		# val <= 0?
0x0e1: 71f400000000000000   | 	jle Npos5		# if so, goto Npos:
0x0ea: c0f00100000000000000 | 	iaddq $1, %rax		# count++
0x0f4:                      | Npos5:
0x0f4: c0f2fbffffffffffffff | 	iaddq $-5, %rdx		# len >= 3?	
0x0fe: 761300000000000000   | 	jg Loop		# if so, len -= 3; goto Loop:
                            | 
0x107:                      | Rolling:
0x107: 73c201000000000000   | 	je ADD5
0x110: c0f20100000000000000 | 	iaddq $1, %rdx
0x11a: 738903000000000000   | 	je ADD4
0x123: c0f20100000000000000 | 	iaddq $1, %rdx
0x12d: 730d03000000000000   | 	je ADD3
0x136: c0f20100000000000000 | 	iaddq $1, %rdx
0x140: 739002000000000000   | 	je ADD2
0x149: c0f20100000000000000 | 	iaddq $1, %rdx
0x153: 73e302000000000000   | 	je ADD1
0x15c: c0f20100000000000000 | 	iaddq $1, %rdx
0x166: 712d04000000000000   | 	jle Done
                            | 
0x16f:                      | RLoop:
0x16f: 50a70000000000000000 | 	mrmovq (%rdi), %r10	
0x179: 40a60000000000000000 | 	rmmovq %r10, (%rsi)
0x183: 62aa                 | 	andq %r10, %r10
0x185: 719801000000000000   | 	jle Npos
0x18e: c0f00100000000000000 | 	iaddq $1, %rax		# counter++
0x198:                      | Npos:
0x198: c0f2ffffffffffffffff | 	iaddq $-1, %rdx		# len--
0x1a2: c0f70800000000000000 | 	iaddq $8, %rdi	
0x1ac: c0f60800000000000000 | 	iaddq $8, %rsi
0x1b6: 6222                 | 	andq %rdx, %rdx
0x1b8: 766f01000000000000   | 	jg RLoop
0x1c1: 90                   | 	ret
                            | 
0x1c2:                      | ADD5:
0x1c2: 50a70000000000000000 | 	mrmovq (%rdi), %r10	# read val from src...
0x1cc: 50b70800000000000000 | 	mrmovq 8(%rdi), %r11	# read val from src...
0x1d6: 50c71000000000000000 | 	mrmovq 16(%rdi), %r12	# read val from src...
0x1e0: 50d71800000000000000 | 	mrmovq 24(%rdi), %r13	# read val from src...
0x1ea: 50e72000000000000000 | 	mrmovq 32(%rdi), %r14	# read val from src...
                            | 
                            | 
0x1f4: 62aa                 | 	andq %r10, %r10		# val <= 0?
0x1f6: 40c61000000000000000 | 	rmmovq %r12, 16(%rsi)	# ...and store it to dst
0x200: 40d61800000000000000 | 	rmmovq %r13, 24(%rsi)	# ...and store it to dst
0x20a: 40e62000000000000000 | 	rmmovq %r14, 32(%rsi)	# ...and store it to dst
0x214: 40a60000000000000000 | 	rmmovq %r10, (%rsi)	# ...and store it to dst
0x21e: 40b60800000000000000 | 	rmmovq %r11, 8(%rsi)	# ...and store it to dst
                            | 
0x228: 713b02000000000000   | 	jle Nposadd1		# if so, goto Npos:
0x231: c0f00100000000000000 | 	iaddq $1, %rax		# count++
0x23b:                      | Nposadd1:
                            | 	
0x23b: 62bb                 | 	andq %r11, %r11		# val <= 0?
0x23d: 715002000000000000   | 	jle Nposadd2		# if so, goto Npos:
0x246: c0f00100000000000000 | 	iaddq $1, %rax		# count++
0x250:                      | Nposadd2:
                            | 
0x250: 62cc                 | 	andq %r12, %r12		# val <= 0?
0x252: 716502000000000000   | 	jle Nposadd3		# if so, goto Npos:
0x25b: c0f00100000000000000 | 	iaddq $1, %rax		# count++
0x265:                      | Nposadd3:
0x265: 62dd                 | 	andq %r13, %r13		# val <= 0?
0x267: 717a02000000000000   | 	jle Nposadd4		# if so, goto Npos:
0x270: c0f00100000000000000 | 	iaddq $1, %rax		# count++
0x27a:                      | Nposadd4:
0x27a: 62ee                 | 	andq %r14, %r14		# val <= 0?
0x27c: 712d04000000000000   | 	jle Done		# if so, goto Npos:
0x285: c0f00100000000000000 | 	iaddq $1, %rax		# count++
0x28f: 90                   | 	ret	
                            | 
0x290:                      | ADD2:
0x290: 50a70000000000000000 | 	mrmovq (%rdi), %r10	# read val from src...
0x29a: 50b70800000000000000 | 	mrmovq 8(%rdi), %r11	# read val from src...
                            | 
0x2a4: 62aa                 | 	andq %r10, %r10		# val <= 0?
0x2a6: 40a60000000000000000 | 	rmmovq %r10, (%rsi)	# ...and store it to dst
0x2b0: 40b60800000000000000 | 	rmmovq %r11, 8(%rsi)	# ...and store it to dst
                            | 
0x2ba: 71cd02000000000000   | 	jle ADD2N		# if so, goto Npos:
0x2c3: c0f00100000000000000 | 	iaddq $1, %rax		# count++
0x2cd:                      | ADD2N:
0x2cd: 62bb                 | 	andq %r11, %r11
0x2cf: 712d04000000000000   | 	jle Done
0x2d8: c0f00100000000000000 | 	iaddq $1, %rax
0x2e2: 90                   | 	ret
0x2e3:                      | ADD1:
0x2e3: 50a70000000000000000 | 	mrmovq (%rdi), %r10	# read val from src...
0x2ed: 62aa                 | 	andq %r10, %r10		# val <= 0?
0x2ef: 40a60000000000000000 | 	rmmovq %r10, (%rsi)	# ...and store it to dst
0x2f9: 712d04000000000000   | 	jle Done		# if so, goto Npos:
0x302: c0f00100000000000000 | 	iaddq $1, %rax		# count++
0x30c: 90                   | 	ret
0x30d:                      | ADD3:
0x30d: 50a70000000000000000 | 	mrmovq (%rdi), %r10	# read val from src...
0x317: 50b70800000000000000 | 	mrmovq 8(%rdi), %r11	# read val from src...
0x321: 50c71000000000000000 | 	mrmovq 16(%rdi), %r12	# read val from src...
                            | 
0x32b: 62aa                 | 	andq %r10, %r10		# val <= 0?
0x32d: 40c61000000000000000 | 	rmmovq %r12, 16(%rsi)	# ...and store it to dst
0x337: 40a60000000000000000 | 	rmmovq %r10, (%rsi)	# ...and store it to dst
0x341: 40b60800000000000000 | 	rmmovq %r11, 8(%rsi)	# ...and store it to dst
                            | 
0x34b: 71ee03000000000000   | 	jle Nposadd41		# if so, goto Npos:
0x354: c0f00100000000000000 | 	iaddq $1, %rax		# count++
0x35e:                      | Nposadd31:
                            | 	
0x35e: 62bb                 | 	andq %r11, %r11		# val <= 0?
0x360: 715002000000000000   | 	jle Nposadd2		# if so, goto Npos:
0x369: c0f00100000000000000 | 	iaddq $1, %rax		# count++
0x373:                      | Nposadd32:
                            | 
0x373: 62cc                 | 	andq %r12, %r12		# val <= 0?
0x375: 712d04000000000000   | 	jle Done		# if so, goto Npos:
0x37e: c0f00100000000000000 | 	iaddq $1, %rax		# count++
0x388: 90                   | 	ret
0x389:                      | ADD4:
0x389: 50a70000000000000000 | 	mrmovq (%rdi), %r10	# read val from src...
0x393: 50b70800000000000000 | 	mrmovq 8(%rdi), %r11	# read val from src...
0x39d: 50c71000000000000000 | 	mrmovq 16(%rdi), %r12	# read val from src...
0x3a7: 50d71800000000000000 | 	mrmovq 24(%rdi), %r13	# read val from src...
                            | 
0x3b1: 62aa                 | 	andq %r10, %r10		# val <= 0?
0x3b3: 40c61000000000000000 | 	rmmovq %r12, 16(%rsi)	# ...and store it to dst
0x3bd: 40d61800000000000000 | 	rmmovq %r13, 24(%rsi)	# ...and store it to dst
0x3c7: 40a60000000000000000 | 	rmmovq %r10, (%rsi)	# ...and store it to dst
0x3d1: 40b60800000000000000 | 	rmmovq %r11, 8(%rsi)	# ...and store it to dst
                            | 
0x3db: 71ee03000000000000   | 	jle Nposadd41		# if so, goto Npos:
0x3e4: c0f00100000000000000 | 	iaddq $1, %rax		# count++
0x3ee:                      | Nposadd41:
                            | 	
0x3ee: 62bb                 | 	andq %r11, %r11		# val <= 0?
0x3f0: 715002000000000000   | 	jle Nposadd2		# if so, goto Npos:
0x3f9: c0f00100000000000000 | 	iaddq $1, %rax		# count++
0x403:                      | Nposadd42:
                            | 
0x403: 62cc                 | 	andq %r12, %r12		# val <= 0?
0x405: 716502000000000000   | 	jle Nposadd3		# if so, goto Npos:
0x40e: c0f00100000000000000 | 	iaddq $1, %rax		# count++
0x418:                      | Nposadd43:
0x418: 62dd                 | 	andq %r13, %r13		# val <= 0?
0x41a: 712d04000000000000   | 	jle Done		# if so, goto Npos:
0x423: c0f00100000000000000 | 	iaddq $1, %rax		# count++
                            | 
                            | 
                            | ##################################################################
                            | # Do not modify the following section of code
                            | # Function epilogue.
0x42d:                      | Done:
0x42d: 90                   | 	ret
                            | ##################################################################
                            | # Keep the following label at the end of your function
0x42e:                      | End:
                            | #/* $end ncopy-ys */
