# Initial code
	irmovq Stack,%rsp
	irmovq ele1, %rdi
	pushq %r8
	call rsum_list
	popq %r8
	halt

# Sample linked list
.align 8
ele1:
	.quad 0x00a
	.quad ele2
ele2:
	.quad 0x0b0
	.quad ele3
ele3:
	.quad 0xc00
	.quad 0

# long rsum_list(list_ptr ls)
# ls in %rdi
rsum_list:
#	pushq %rbp
#	rrmovq %rsp, %rbp

	pushq %rbx		# Save %rbx
	andq %rdi,%rdi		# ls == 0?
	je zret			# Yes, goto zreturn

	xorq %rax, %rax
	mrmovq (%rdi), %rbx	# store ls->val to %rbx
	addq %rbx, %rax		# val += ls->val
	pushq %rax		# save %rax(val)

	mrmovq 8(%rdi), %rdi	# ls = ls->next
	call rsum_list
	popq %r8		# store previous rax to r8

	addq %r8, %rax		# return val + rest
	jmp done		# Goto done
zret:	xorq %rax,%rax		# val = 0
done:	popq %rbx		# restore %rbx
	ret			# return

.pos 0x100
Stack:
