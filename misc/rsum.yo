                            | # Initial code
0x000: 30f40001000000000000 | 	irmovq Stack,%rsp
0x00a: 30f72800000000000000 | 	irmovq ele1, %rdi
0x014: a08f                 | 	pushq %r8
0x016: 805800000000000000   | 	call rsum_list
0x01f: b08f                 | 	popq %r8
0x021: 00                   | 	halt
                            | 
                            | # Sample linked list
0x028:                      | .align 8
0x028:                      | ele1:
0x028: 0a00000000000000     | 	.quad 0x00a
0x030: 3800000000000000     | 	.quad ele2
0x038:                      | ele2:
0x038: b000000000000000     | 	.quad 0x0b0
0x040: 4800000000000000     | 	.quad ele3
0x048:                      | ele3:
0x048: 000c000000000000     | 	.quad 0xc00
0x050: 0000000000000000     | 	.quad 0
                            | 
                            | # long rsum_list(list_ptr ls)
                            | # ls in %rdi
0x058:                      | rsum_list:
                            | #	pushq %rbp
                            | #	rrmovq %rsp, %rbp
                            | 
0x058: a03f                 | 	pushq %rbx		# Save %rbx
0x05a: 6277                 | 	andq %rdi,%rdi		# ls == 0?
0x05c: 739500000000000000   | 	je zret			# Yes, goto zreturn
                            | 
0x065: 6300                 | 	xorq %rax, %rax
0x067: 50370000000000000000 | 	mrmovq (%rdi), %rbx	# store ls->val to %rbx
0x071: 6030                 | 	addq %rbx, %rax		# val += ls->val
0x073: a00f                 | 	pushq %rax		# save %rax(val)
                            | 
0x075: 50770800000000000000 | 	mrmovq 8(%rdi), %rdi	# ls = ls->next
0x07f: 805800000000000000   | 	call rsum_list
0x088: b08f                 | 	popq %r8		# store previous rax to r8
                            | 
0x08a: 6080                 | 	addq %r8, %rax		# return val + rest
0x08c: 709700000000000000   | 	jmp done		# Goto done
0x095: 6300                 | zret:	xorq %rax,%rax		# val = 0
0x097: b03f                 | done:	popq %rbx		# restore %rbx
0x099: 90                   | 	ret			# return
                            | 
0x100:                      | .pos 0x100
0x100:                      | Stack:
