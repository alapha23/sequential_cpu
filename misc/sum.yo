                            | # Initial code
0x000: 30f40001000000000000 | 	irmovq Stack,%rsp
0x00a: 30f72800000000000000 | 	irmovq ele1, %rdi
0x014: a01f                 | 	pushq %rcx
0x016: a07f                 | 	pushq %rdi
0x018: 805800000000000000   | 	call sum_list
0x021: b07f                 | 	popq %rdi
0x023: b01f                 | 	popq %rcx
0x025: 00                   | 	halt
                            | 
                            | # Sample linked list
0x028:                      | .align 8
0x028:                      | ele1:
0x028: 0a00000000000000     | 	.quad 0x00a
0x030: 3800000000000000     | 	.quad ele2
0x038:                      | ele2:
0x038: b000000000000000     | 	.quad 0x0b0
0x040: 4800000000000000     | 	.quad ele3
0x048:                      | ele3:
0x048: 000c000000000000     | 	.quad 0xc00
0x050: 0000000000000000     | 	.quad 0
                            | 
                            | # long sum_list(list_ptr ls)
                            | # ls in %rdi
0x058:                      | sum_list:
0x058: 6300                 | 	xorq %rax,%rax          # val = 0
0x05a: 6277                 | 	andq %rdi,%rdi		# ls == 0?
0x05c: 738600000000000000   | 	je done			# Yes, goto done
0x065:                      | loop:
                            | 
0x065: 50170000000000000000 | 	mrmovq (%rdi), %rcx	# store ls->val to %rcx
0x06f: 6010                 | 	addq %rcx, %rax		# val += ls->val
                            | 
0x071: 50770800000000000000 | 	mrmovq 8(%rdi), %rdi	# ls = ls->next
                            | 
0x07b: 6277                 | 	andq %rdi, %rdi		# ls == 0?
0x07d: 746500000000000000   | 	jne loop	        # If null, goto done
0x086: 90                   | done:	ret			# return
                            | 
0x100:                      | .pos 0x100
0x100:                      | Stack:
